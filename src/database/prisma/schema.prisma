// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  sku         String   @unique
  name        String
  description String   @db.Text()
  price       Float
  active      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  inventory  Inventory[]
  orderItems OrderItems[]

  @@index([name])
  @@map("products")
}

model Inventory {
  id        String   @id @default(cuid())
  stock     Int
  reserved  Int
  updatedAt DateTime @updatedAt

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Order {
  id              String      @id @default(cuid())
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  currency        String
  shippingAddress Json
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderItems OrderItems[]
  shipments  Shipment[]

  payment Payment?

  @@index([userId])
  @@index([status])
  @@map("orders")
}

model OrderItems {
  id         String   @id @default(cuid())
  quantity   Int
  unit_price Float
  subtotal   Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  paymentMethod String
  amount        Float
  status        PaymentStatus
  transactionId String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("payments")
}

model Shipment {
  id             String         @id @default(cuid())
  trackingNumber String
  carrier        Carrier
  status         ShipmentStatus
  shippedAt      DateTime
  deliveredAt    DateTime
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([trackingNumber])
  @@map("shipments")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CENCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ShipmentStatus {
  CREATED
  IN_TRANSIT
  DELIVERED
  RETURNED
}

enum Carrier {
  UPS
  FEDEX
  DHL
}
